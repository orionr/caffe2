#include "caffe2/core/context_gpu.h"
#include "caffe2/operators/conv_pool_op_base.h"

namespace caffe2 {

template <typename dtype>
class CudnnConvOp final : public ConvPoolOpBase<dtype, CUDAContext> {
 public:
  CudnnConvOp(const OperatorDef& operator_def, Workspace* ws)
      : ConvPoolOpBase<dtype, CUDAContext>(operator_def, ws),
        kOne(1, &device_context_), kZero(0, &device_context_) {}
  ~CudnnConvOp() {}

  bool ConfigureCudnnConvolution() {
    CUDNN_CHECK(cudnnCreateFilterDescriptor(&filter_desc_));
    CUDNN_CHECK(cudnnSetFilter4dDescriptor(
        filter_desc, GetCudnnTensorFormat(order_), ))
  }

  bool RunOnDevice() override {
    // TODO: Reshape

    for (int i)
  }

 private:
  cudnnTensorDescriptor_t bottom_desc_;
  cudnnFilterDescriptor_t filter_desc_;
  cudnnTensorDescriptor_t bias_desc_;
  cudnnTensorDescriptor_t top_desc_;
  cudnnConvolutionDescriptor_t conv_desc_;
  // Input: X, W, b
  // Output: Y
  INPUT_OUTPUT_STATS(3, 3, 1, 1);
  DISABLE_COPY_AND_ASSIGN(ConvOp);
};

/*
template <typename dtype, class DeviceContext>
class ConvGradientOp final : public ConvPoolOpBase<dtype, DeviceContext> {
 public:
  USE_CONV_POOL_BASE_FUNCTIONS;
  ConvGradientOp(const OperatorDef& operator_def, Workspace* ws)
      : ConvPoolOpBase<dtype, DeviceContext>(operator_def, ws),
        kOne(1, &device_context_), kZero(0, &device_context_) {}
  ~ConvGradientOp() {}

  bool RunOnDeviceWithOrderNCHW() override;
  bool RunOnDeviceWithOrderNHWC() override;

 private:
  Tensor<dtype, DeviceContext> col_buffer_;
  Tensor<dtype, DeviceContext> bias_multiplier_;
  Tensor<dtype, DeviceContext> kOne;
  Tensor<dtype, DeviceContext> kZero;
  // input: X, W, b, dY
  // output: dW, db, and optionally dX
  INPUT_OUTPUT_STATS(4, 4, 2, 3);
  DISABLE_COPY_AND_ASSIGN(ConvGradientOp);
};
*/

}  // namespace caffe2
